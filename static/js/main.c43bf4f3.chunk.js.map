{"version":3,"sources":["randomAnswers.js","components/Header.js","components/Message.js","components/Messages.js","components/Form.js","App.js","serviceWorker.js","index.js","EightBall.png"],"names":["randomAnswers","Header","className","Message","message","floatDependency","author","src","EightBall","alt","icon","faUserCircle","size","content","Messages","messages","bottomRef","useRef","useEffect","current","scrollIntoView","behavior","scrollToBottom","style","height","window","innerHeight","map","key","id","ref","Form","ask","questionRef","onSubmit","e","preventDefault","value","placeholder","type","App","useState","uuid","v4","setMessages","question","newQuestion","newAnwer","Math","floor","random","length","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"0RAAMA,G,MAAgB,CAClB,oBACA,iBACA,oBACA,sBACA,gBACA,mBACA,cACA,eACA,qBACA,MACA,gBACA,qBACA,kBACA,mBACA,qBACA,wBACA,kBACA,0BACA,qBACA,8BCbWC,EALA,kBACX,yBAAKC,UAAU,UAAf,iB,gCC8BWC,EA3BC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACTC,EAAkB,iBACD,cAAnBD,EAAQE,OAAyB,sBAAwB,wBAE7D,OACI,yBAAKJ,UAAU,WACX,+BACI,+BACI,4BACI,wBAAIA,UAAWG,KACS,cAAnBD,EAAQE,OACH,yBAAKC,IAAKC,IAAWC,IAAKD,IAAWN,UAAU,0BAC/C,kBAAC,IAAD,CACEA,UAAU,qCACVQ,KAAMC,IACNC,KAAK,QAEjB,wBAAIV,UAAWG,KACX,uBAAGH,UAAU,oBAAoBE,EAAQS,eCFtDC,EAlBE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAYC,iBAAO,MASzB,OAJAC,qBAAU,YAHa,2BACnBF,EAAUG,eADS,OACnB,EAAmBC,eAAe,CAAEC,SAAU,WAG9CC,KACD,CAACP,IAGA,yBAAKb,UAAU,WAAWqB,MAAO,CAACC,OAAO,QAAD,OAAUC,OAAOC,YAAjB,iBACnCX,EAASY,KAAI,SAAAvB,GAAO,OAAI,kBAAC,EAAD,CAASwB,IAAKxB,EAAQyB,GAAIzB,QAASA,OAC5D,yBAAK0B,IAAKd,MCCPe,EAhBF,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACNC,EAAchB,iBAAO,MAO3B,OACI,0BAAMf,UAAU,OAAOgC,SANR,SAAAC,GACfA,EAAEC,iBACFJ,EAAIC,EAAYd,QAAQkB,SAKpB,2BAAOP,IAAKG,EAAaK,YAAY,4BACrC,4BAAQC,KAAK,UAAb,SC8BGC,EAjCH,WAAO,IAAD,EACkBC,mBAAS,CACzC,CACEZ,GAAIa,IAAKC,KACTrC,OAAQ,YACRO,QAAS,6CALG,mBACRE,EADQ,KACE6B,EADF,KAwBd,OACE,yBAAK1C,UAAU,MAAMqB,MAAO,CAACC,OAAO,GAAD,OAAKC,OAAOC,YAAZ,QACjC,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUX,SAAUA,IACpB,kBAAC,EAAD,CAAMiB,IAnBA,SAAAa,GACV,IAAMC,EAAc,CAClBjB,GAAIa,IAAKC,KACTrC,OAAQ,OACRO,QAASgC,GAELE,EAAW,CACflB,GAAIa,IAAKC,KACTrC,OAAQ,YACRO,QLJFb,EAAcgD,KAAKC,MAAMD,KAAKE,SAAWlD,EAAcmD,UKOvDP,EAAY,GAAD,mBAAK7B,GAAL,CAAe+B,EAAaC,UCnBvBK,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.c43bf4f3.chunk.js","sourcesContent":["const randomAnswers = [\n    \"Don't count on it\",\n    \"My reply is no\",\n    \"My sources say no\",\n    \"Outlook not so good\",\n    \"Very doubtful\",\n    \"As I see it, yes\",\n    \"Most likely\",\n    \"Outlook good\",\n    \"Signs point to yes\",\n    \"Yes\",\n    \"It is certain\",\n    \"It is decidedly so\",\n    \"Without a doubt\",\n    \"Yes - definitely\",\n    \"You may rely on it\",\n    \"Reply hazy, try again\",\n    \"Ask again later\",\n    \"Better not tell you now\",\n    \"Cannot predict now\",\n    \"Concentrate and ask again\"             \n];\n\nconst randomAnswer = () => \n    randomAnswers[Math.floor(Math.random() * randomAnswers.length)];\n\nexport { randomAnswer };","import React from 'react';\n\nconst Header = () =>\n    <div className='header'>\n        magic 8 ball\n    </div>;\n\nexport default Header;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons';\n\nimport EightBall from '../EightBall.png';\n\nconst Message = ({ message }) => {\n    const floatDependency = () => \n        message.author === 'eightBall' ? 'message--float-left' : 'message--float-right';\n\n    return (\n        <div className='message'>\n            <table>\n                <thead>\n                    <tr>\n                        <th className={floatDependency()}>\n                            {message.author === 'eightBall'\n                                ? <img src={EightBall} alt={EightBall} className='message--margin-right' />\n                                : <FontAwesomeIcon \n                                    className='message__icon message--margin-left' \n                                    icon={faUserCircle} \n                                    size='3x' />}\n                        </th>\n                        <th className={floatDependency()}>\n                            <p className='message__content'>{message.content}</p>\n                        </th>\n                    </tr>\n                </thead>\n            </table>\n        </div>\n    );\n};\n\nexport default Message;","import React, { useRef, useEffect } from 'react';\n\nimport Message from './Message';\n\nconst Messages = ({ messages }) => {\n    const bottomRef = useRef(null);\n\n    const scrollToBottom = () => \n        bottomRef.current?.scrollIntoView({ behavior: 'smooth' });\n\n    useEffect(() => {\n        scrollToBottom();\n    }, [messages]);\n\n    return (\n        <div className='messages' style={{height: `calc(${window.innerHeight}px - 120px)`}}>\n            {messages.map(message => <Message key={message.id} message={message} />)}\n            <div ref={bottomRef} />\n        </div>\n    );\n};\n\nexport default Messages;","import React, { useRef } from 'react';\n\nconst Form = ({ ask }) => {\n    const questionRef = useRef(null);\n\n    const triggerAsk = e => {\n        e.preventDefault();\n        ask(questionRef.current.value);\n    };\n\n    return (\n        <form className='form' onSubmit={triggerAsk}>\n            <input ref={questionRef} placeholder='Dear magic 8 ball . . .' />\n            <button type='submit'>ask</button>\n        </form>\n    );\n};\n\nexport default Form;","import React, { useState } from 'react';\nimport uuid from \"uuid\";\n\nimport './App.css';\nimport { randomAnswer } from './randomAnswers';\n\nimport Header from './components/Header';\nimport Messages from './components/Messages';\nimport Form from './components/Form';\n\nconst App = () => {\n  const [ messages, setMessages ] = useState([\n    {\n      id: uuid.v4(),\n      author: 'eightBall',\n      content: 'Ask me your deepest, darkest questions.'\n    }\n  ]);\n\n  const ask = question => {\n    const newQuestion = {\n      id: uuid.v4(),\n      author: 'user',\n      content: question\n    };\n    const newAnwer = {\n      id: uuid.v4(),\n      author: 'eightBall',\n      content: randomAnswer()\n    };\n\n    setMessages([...messages, newQuestion, newAnwer]);\n  };\n\n    return (\n      <div className='app' style={{height: `${window.innerHeight}px`}}>\n        <Header />\n        <Messages messages={messages} />\n        <Form ask={ask} />\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/EightBall.6cad85d6.png\";"],"sourceRoot":""}